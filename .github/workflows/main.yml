name: CI/CD

on: [push, pull_request]

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Detect Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Setup Composer Cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: composer-cache-${{ hashFiles('composer.lock') }}
      - name: Install Composer Packages
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

      - name: Lint Code
        run: composer lint

      - name: Detect Yarn Cache Directory
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Setup Yarn Cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: yarn-cache-${{ hashFiles('yarn.lock') }}
      - name: Install Javascript Packages
        run: yarn install --silent --ignore-scripts --non-interactive --no-progress
      - name: Build Javascript Assets
        run: yarn production

#      - name: Test Application
#        run: php artisan test

      - name: Persist CSS Assets
        uses: actions/upload-artifact@v1
        with:
          name: css-assets
          path: public/css
      - name: Persist Javascript Assets
        uses: actions/upload-artifact@v1
        with:
          name: js-assets
          path: public/js
      - name: Persist Mix Manifest
        uses: actions/upload-artifact@v1
        with:
          name: mix-manifest
          path: public/mix-manifest.json

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: tests
    if: github.repository == 'iksaku/jorgeglz.io' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Restore CSS Assets
        uses: actions/download-artifact@v1
        with:
          name: css-assets
      - name: Restore Javascript Assets
        uses: actions/download-artifact@v1
        with:
          name: js-assets
      - name: Restore Mix Manifest
        uses: actions/download-artifact@v1
        with:
          name: mix-manifest
      - name: Fix Assets Path
        run: |
          mv css-assets public/css
          mv js-assets public/js
          mv mix-manifest/mix-manifest.json public
          rm -rf mix-manifest

      - name: Detect Composer Cache Directory
          id: composer-cache
          run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Setup Composer Cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: composer-cache-${{ hashFiles('composer.lock') }}
      - name: Install Composer Packages
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

      - name: Deploy to Production
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          SSH_PATH=$HOME/.ssh

          mkdir -p $SSH_PATH
          chmod 700 $SSH_PATH

          touch $SSH_PATH/known_hosts
          chmod 600 $SSH_PATH/known_hosts

          eval $(ssh-agent -s)

          echo "$DEPLOY_KEY" | tr -d '\r' | ssh-add -

          ssh-keyscan -H $DEPLOY_HOST >> $SSH_PATH/known_hosts

          php artisan deploy -s upload
